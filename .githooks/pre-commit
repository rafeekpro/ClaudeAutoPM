#!/bin/bash

# Pre-commit hook for ACTIVE_STRATEGY protection
# Ensures tests pass before allowing commits

echo "🔒 Running pre-commit validation..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Track if all checks pass
ALL_PASS=true

# Function to run tests
run_test() {
    local test_name=$1
    local test_command=$2

    echo -n "  ⏳ $test_name... "

    if $test_command > /dev/null 2>&1; then
        echo -e "${GREEN}✓${NC}"
        return 0
    else
        echo -e "${RED}✗${NC}"
        ALL_PASS=false
        return 1
    fi
}

# 1. Check for critical files
echo "📁 Checking critical files..."
CRITICAL_FILES=(
    ".claude/strategies/ACTIVE_STRATEGY.md"
    ".claude/base.md"
    "package.json"
)

for file in "${CRITICAL_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        echo -e "  ${RED}✗ Missing: $file${NC}"
        ALL_PASS=false
    else
        echo -e "  ${GREEN}✓ Found: $file${NC}"
    fi
done

# 2. Run regression tests (if they exist)
if [ -f "test/regression/critical-paths.test.js" ]; then
    echo ""
    echo "🧪 Running regression tests..."
    run_test "Critical paths" "node --test test/regression/critical-paths.test.js"
fi

# 3. Check for test file modifications
echo ""
echo "🔍 Checking for test modifications..."
MODIFIED_TESTS=$(git diff --cached --name-only | grep -E "test/.*\.js$" || true)

if [ -n "$MODIFIED_TESTS" ]; then
    echo -e "  ${YELLOW}⚠️  Test files modified:${NC}"
    echo "$MODIFIED_TESTS" | while read -r file; do
        echo "    - $file"
    done
    echo "  Running affected tests..."

    for test_file in $MODIFIED_TESTS; do
        if [ -f "$test_file" ]; then
            run_test "$(basename $test_file)" "node --test $test_file"
        fi
    done
fi

# 4. Check for ACTIVE_STRATEGY modifications
if git diff --cached --name-only | grep -q "strategies/ACTIVE_STRATEGY.md"; then
    echo ""
    echo -e "${YELLOW}⚠️  ACTIVE_STRATEGY.md modified!${NC}"
    echo "  Running full security test suite..."

    if [ -f "test/run-security-tests.js" ]; then
        if ! node test/run-security-tests.js > /dev/null 2>&1; then
            echo -e "  ${RED}✗ Security tests failed!${NC}"
            echo -e "  ${RED}Run 'npm run test:security' to see details${NC}"
            ALL_PASS=false
        else
            echo -e "  ${GREEN}✓ Security tests passed${NC}"
        fi
    fi
fi

# 5. Quick syntax check on JS files
echo ""
echo "🔧 Checking JavaScript syntax..."
JS_FILES=$(git diff --cached --name-only | grep -E "\.js$" || true)

if [ -n "$JS_FILES" ]; then
    for file in $JS_FILES; do
        if [ -f "$file" ]; then
            if ! node -c "$file" 2>/dev/null; then
                echo -e "  ${RED}✗ Syntax error in $file${NC}"
                ALL_PASS=false
            fi
        fi
    done
    echo -e "  ${GREEN}✓ JavaScript syntax OK${NC}"
fi

# 6. Check JSON validity
echo ""
echo "📋 Checking JSON files..."
JSON_FILES=$(git diff --cached --name-only | grep -E "\.json$" || true)

if [ -n "$JSON_FILES" ]; then
    for file in $JSON_FILES; do
        if [ -f "$file" ]; then
            if ! python3 -m json.tool "$file" > /dev/null 2>&1; then
                echo -e "  ${RED}✗ Invalid JSON in $file${NC}"
                ALL_PASS=false
            fi
        fi
    done
    echo -e "  ${GREEN}✓ JSON files valid${NC}"
fi

# Final result
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

if [ "$ALL_PASS" = true ]; then
    echo -e "${GREEN}✅ All checks passed! Proceeding with commit.${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    exit 0
else
    echo -e "${RED}❌ Pre-commit checks failed!${NC}"
    echo ""
    echo "To bypass (not recommended):"
    echo "  git commit --no-verify"
    echo ""
    echo "To run tests manually:"
    echo "  npm run test:security"
    echo "  npm run test:regression"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    exit 1
fi