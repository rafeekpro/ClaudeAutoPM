#!/usr/bin/env node

/**
 * Node.js implementation of setup-azure-aliases.sh
 * Azure DevOps Command Aliases Setup
 * Sets up convenient aliases for frequently used Azure DevOps commands
 */

const fs = require('fs');
const path = require('path');
const os = require('os');
const { execSync } = require('child_process');

class SetupAzureAliases {
  constructor() {
    // ANSI color codes
    this.colors = {
      red: '\x1b[31m',
      green: '\x1b[32m',
      yellow: '\x1b[33m',
      blue: '\x1b[34m',
      reset: '\x1b[0m'
    };

    // Detect shell type
    this.detectShell();
  }

  // Helper to print colored messages
  print(message, color = null) {
    if (color && this.colors[color]) {
      console.log(`${this.colors[color]}${message}${this.colors.reset}`);
    } else {
      console.log(message);
    }
  }

  // Detect user's shell
  detectShell() {
    const shell = process.env.SHELL || '';

    if (shell.includes('zsh')) {
      this.shellType = 'zsh';
      this.shellRc = path.join(os.homedir(), '.zshrc');
    } else if (shell.includes('bash')) {
      this.shellType = 'bash';
      this.shellRc = path.join(os.homedir(), '.bashrc');
    } else {
      this.print('‚ö†Ô∏è Unsupported shell. Please manually add aliases.', 'yellow');
      process.exit(1);
    }
  }

  // Create the aliases file content
  createAliasesContent() {
    return `# Azure DevOps Command Aliases
# Generated by ClaudeAutoPM

# Quick access to daily workflow
alias az-daily='./autopm/.claude/scripts/azure/daily.sh'
alias azd='az-daily'

# Task management
alias az-next='./autopm/.claude/scripts/azure/next-task.sh'
alias azn='az-next'
alias az-tasks='./autopm/.claude/scripts/azure/active-work.sh'
alias azt='az-tasks'
alias az-blocked='./autopm/.claude/scripts/azure/blocked.sh'
alias azb='az-blocked'

# User Story management
alias az-us='./autopm/.claude/scripts/azure/us-list.sh'
alias azu='az-us'
alias az-us-status='./autopm/.claude/scripts/azure/us-status.sh'
alias azus='az-us-status'

# Feature management
alias az-features='./autopm/.claude/scripts/azure/feature-list.sh'
alias azf='az-features'
alias az-feature-show='./autopm/.claude/scripts/azure/feature-show.sh'
alias azfs='az-feature-show'

# Sprint and reporting
alias az-sprint='./autopm/.claude/scripts/azure/sprint-report.sh current'
alias azs='az-sprint'
alias az-dash='./autopm/.claude/scripts/azure/dashboard.sh'
alias azdb='az-dash'

# Synchronization
alias az-sync='./autopm/.claude/scripts/azure/sync.sh --quick'
alias az-sync-full='./autopm/.claude/scripts/azure/sync.sh --full'
alias azsy='az-sync'

# Search
alias az-search='./autopm/.claude/scripts/azure/search.sh'
alias azsr='az-search'

# Validation
alias az-validate='./autopm/.claude/scripts/azure/validate.sh'
alias azv='az-validate'

# Compound commands for common workflows
alias az-morning='az-sync && az-daily && az-sprint'
alias az-standup='az-daily --standup'
alias az-my-work='az-tasks --user=me'
alias az-my-stories='az-us --assigned-to=me'

# Functions for more complex operations
az-work-on() {
    if [ -z "$1" ]; then
        echo "Usage: az-work-on <work-item-id>"
        return 1
    fi
    echo "üöÄ Starting work on item #$1..."
    ./autopm/.claude/scripts/azure/task-start.sh "$1"
}

az-complete() {
    if [ -z "$1" ]; then
        echo "Usage: az-complete <work-item-id>"
        return 1
    fi
    echo "‚úÖ Completing work on item #$1..."
    ./autopm/.claude/scripts/azure/task-close.sh "$1"
}

az-find() {
    if [ -z "$1" ]; then
        echo "Usage: az-find <search-term>"
        return 1
    fi
    ./autopm/.claude/scripts/azure/search.sh "$@"
}

az-show() {
    if [ -z "$1" ]; then
        echo "Usage: az-show <work-item-id>"
        return 1
    fi
    # Determine type and show appropriate details
    if [[ "$1" =~ ^F ]]; then
        ./autopm/.claude/scripts/azure/feature-show.sh "$1"
    elif [[ "$1" =~ ^US ]]; then
        ./autopm/.claude/scripts/azure/us-status.sh "$1"
    else
        ./autopm/.claude/scripts/azure/task-show.sh "$1"
    fi
}

# Help function
az-help() {
    echo "üìö Azure DevOps CLI Aliases"
    echo "=========================="
    echo ""
    echo "Daily Workflow:"
    echo "  azd, az-daily      - Daily workflow automation"
    echo "  azn, az-next       - Get next task recommendation"
    echo "  azt, az-tasks      - Show active work items"
    echo "  azb, az-blocked    - View blocked items"
    echo ""
    echo "User Stories:"
    echo "  azu, az-us         - List user stories"
    echo "  azus, az-us-status - Show story status"
    echo ""
    echo "Features:"
    echo "  azf, az-features   - List all features"
    echo "  azfs               - Show feature details"
    echo ""
    echo "Sprint & Reports:"
    echo "  azs, az-sprint     - Sprint report"
    echo "  azdb, az-dash      - Dashboard overview"
    echo ""
    echo "Other:"
    echo "  azsy, az-sync      - Quick sync"
    echo "  azsr, az-search    - Search work items"
    echo "  azv, az-validate   - Validate work items"
    echo ""
    echo "Workflows:"
    echo "  az-morning         - Morning routine"
    echo "  az-standup         - Standup report"
    echo "  az-my-work         - Your active items"
    echo ""
    echo "Functions:"
    echo "  az-work-on <id>    - Start work on item"
    echo "  az-complete <id>   - Complete work item"
    echo "  az-find <term>     - Search for items"
    echo "  az-show <id>       - Show item details"
}

echo "‚úÖ Azure DevOps aliases loaded!"`;
  }

  // Create aliases file
  createAliasesFile() {
    const aliasesFile = path.join(os.homedir(), '.azure-devops-aliases');
    const content = this.createAliasesContent();

    try {
      fs.writeFileSync(aliasesFile, content);
      return aliasesFile;
    } catch (error) {
      this.print(`‚ùå Failed to create aliases file: ${error.message}`, 'red');
      return null;
    }
  }

  // Update shell RC file
  updateShellRc(aliasesFile) {
    try {
      const rcContent = fs.existsSync(this.shellRc) ? fs.readFileSync(this.shellRc, 'utf8') : '';

      // Check if aliases are already sourced
      if (rcContent.includes('.azure-devops-aliases')) {
        this.print(`‚úì Aliases already configured in ${this.shellRc}`, 'green');
        return true;
      }

      // Add source command
      const additions = [
        '',
        '# Azure DevOps Command Aliases',
        '[ -f ~/.azure-devops-aliases ] && source ~/.azure-devops-aliases',
        ''
      ].join('\n');

      fs.appendFileSync(this.shellRc, additions);
      this.print(`‚úÖ Added aliases to ${this.shellRc}`, 'green');
      return true;
    } catch (error) {
      this.print(`‚ùå Failed to update ${this.shellRc}: ${error.message}`, 'red');
      return false;
    }
  }

  // Setup completions
  setupCompletions() {
    const completionFile = `completions/azure-completion.${this.shellType}`;

    if (!fs.existsSync(completionFile)) {
      this.print(`‚ö†Ô∏è  Completion file not found: ${completionFile}`, 'yellow');
      return false;
    }

    try {
      const completionDest = path.join(os.homedir(), '.azure-devops-completion');
      fs.copyFileSync(completionFile, completionDest);

      const rcContent = fs.readFileSync(this.shellRc, 'utf8');
      if (!rcContent.includes('.azure-devops-completion')) {
        const addition = '[ -f ~/.azure-devops-completion ] && source ~/.azure-devops-completion\n';
        fs.appendFileSync(this.shellRc, addition);
        this.print('‚úÖ Added completions to ' + this.shellRc, 'green');
      } else {
        this.print('‚úì Completions already configured', 'green');
      }
      return true;
    } catch (error) {
      this.print(`‚ö†Ô∏è  Could not setup completions: ${error.message}`, 'yellow');
      return false;
    }
  }

  // Show post-installation instructions
  showInstructions() {
    console.log('');
    this.print('üìã Installation complete!', 'blue');
    console.log('');
    console.log('To use the new aliases, either:');
    console.log(`  1. Restart your terminal`);
    console.log(`  2. Run: source ${this.shellRc}`);
    console.log('');
    console.log("Type 'az-help' to see all available aliases");
    console.log('');
    console.log('Quick start commands:');
    console.log('  azd    - Daily workflow');
    console.log('  azn    - Next task');
    console.log('  azt    - Active tasks');
    console.log('  azs    - Sprint report');
    console.log('  azdb   - Dashboard');
  }

  // Main setup function
  async run() {
    this.print('üîß Setting up Azure DevOps command aliases...', 'blue');

    // Create aliases file
    const aliasesFile = this.createAliasesFile();
    if (!aliasesFile) {
      process.exit(1);
    }

    // Update shell RC file
    if (!this.updateShellRc(aliasesFile)) {
      process.exit(1);
    }

    // Setup completions (optional)
    this.setupCompletions();

    // Show instructions
    this.showInstructions();

    process.exit(0);
  }
}

// CLI entry point
if (require.main === module) {
  const setup = new SetupAzureAliases();
  setup.run().catch(error => {
    console.error('Error:', error.message);
    process.exit(1);
  });
}

module.exports = SetupAzureAliases;