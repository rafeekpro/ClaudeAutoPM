{
  "name": "@claudeautopm/plugin-testing",
  "version": "2.0.0",
  "schemaVersion": "2.0",
  "displayName": "Testing & QA",
  "description": "Complete testing plugin with Jest, Vitest, Testing Library, and comprehensive test strategies for frontend, backend, and E2E testing",
  "category": "testing",
  "metadata": {
    "category": "Testing & QA",
    "author": "ClaudeAutoPM Team",
    "license": "MIT",
    "homepage": "https://github.com/rafeekpro/ClaudeAutoPM",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/rafeekpro/ClaudeAutoPM.git",
      "directory": "packages/plugin-testing"
    },
    "size": "~12 KB (gzipped)",
    "required": false,
    "tags": ["testing", "qa", "jest", "vitest", "testing-library", "unit-testing", "integration-testing"]
  },
  "agents": [
    {
      "name": "frontend-testing-engineer",
      "file": "agents/frontend-testing-engineer.md",
      "category": "testing",
      "description": "Frontend unit and integration testing with Jest, Vitest, Testing Library for React, Vue, Angular",
      "version": "2.0.0",
      "tags": ["frontend", "testing", "jest", "vitest", "react-testing-library", "vue", "angular"],
      "mcp": [],
      "context7": [
        "/vitest-dev/vitest",
        "/testing-library/testing-library-docs",
        "/testing-library/react-testing-library"
      ]
    }
  ],
  "commands": [
    {
      "name": "test-setup",
      "file": "commands/test-setup.md",
      "category": "testing",
      "priority": "medium",
      "description": "Setup comprehensive testing framework with Jest/Vitest, Testing Library, and coverage reporting",
      "tags": ["testing", "setup", "jest", "vitest", "configuration"],
      "mcpTools": ["context7"]
    },
    {
      "name": "test-coverage",
      "file": "commands/test-coverage.md",
      "category": "testing",
      "priority": "medium",
      "description": "Generate and analyze test coverage reports with actionable improvements",
      "tags": ["coverage", "reporting", "quality", "metrics"],
      "mcpTools": []
    },
    {
      "name": "jest-optimize",
      "file": "commands/jest-optimize.md",
      "description": "Optimize Jest test performance with parallel execution, sharding, and database optimization",
      "category": "optimization",
      "tags": ["jest", "performance", "parallel", "sharding", "database", "optimization"],
      "requiredAgents": ["frontend-testing-engineer"],
      "context7": [
        "/goldbergyoni/nodejs-testing-best-practices",
        "/websites/jestjs_io_next"
      ]
    },
    {
      "name": "playwright-optimize",
      "file": "commands/playwright-optimize.md",
      "description": "Optimize Playwright E2E tests with fully parallel execution, sharding, and browser optimization",
      "category": "optimization",
      "tags": ["playwright", "e2e", "parallel", "sharding", "performance", "optimization"],
      "requiredAgents": ["e2e-test-engineer"],
      "context7": [
        "/microsoft/playwright"
      ]
    },
    {
      "name": "test-performance",
      "file": "commands/test-performance.md",
      "description": "Comprehensive testing performance optimization across Jest, Playwright, Vitest with CI/CD pipeline optimization",
      "category": "optimization",
      "tags": ["performance", "optimization", "jest", "playwright", "vitest", "ci-cd", "testing"],
      "requiredAgents": ["frontend-testing-engineer", "e2e-test-engineer"],
      "context7": [
        "/goldbergyoni/nodejs-testing-best-practices",
        "/microsoft/playwright",
        "/vitest-dev/vitest"
      ]
    }
  ],
  "rules": [
    {
      "name": "testing-standards",
      "file": "rules/testing-standards.md",
      "priority": "high",
      "description": "Comprehensive testing standards with Context7-verified best practices for unit, integration, and E2E tests",
      "tags": ["testing", "standards", "best-practices", "quality"],
      "appliesTo": ["commands", "agents"],
      "enforcesOn": ["frontend-testing-engineer"]
    },
    {
      "name": "test-coverage-requirements",
      "file": "rules/test-coverage-requirements.md",
      "priority": "high",
      "description": "Test coverage thresholds and quality metrics enforcement",
      "tags": ["coverage", "quality", "metrics", "enforcement"],
      "appliesTo": ["commands", "agents"],
      "enforcesOn": ["frontend-testing-engineer"]
    }
  ],
  "scripts": [
    {
      "name": "vitest-config-example",
      "file": "scripts/examples/vitest-config-example.js",
      "description": "Vitest configuration example with coverage, sharding, and performance profiling",
      "type": "example",
      "executable": true,
      "category": "vitest",
      "tags": ["vitest", "config", "testing", "context7"]
    },
    {
      "name": "react-testing-example",
      "file": "scripts/examples/react-testing-example.test.jsx",
      "description": "React Testing Library example with Context7-verified patterns and best practices",
      "type": "example",
      "executable": true,
      "category": "react",
      "tags": ["react", "testing-library", "vitest", "context7"]
    },
    {
      "name": "vue-testing-example",
      "file": "scripts/examples/vue-testing-example.test.js",
      "description": "Vue Test Utils + Vitest example with Context7-verified patterns",
      "type": "example",
      "executable": true,
      "category": "vue",
      "tags": ["vue", "vitest", "testing", "context7"]
    }
  ],
  "features": {
    "unit_testing": {
      "enabled": true,
      "description": "Jest and Vitest for comprehensive unit testing"
    },
    "integration_testing": {
      "enabled": true,
      "description": "Integration testing strategies and patterns"
    },
    "component_testing": {
      "enabled": true,
      "description": "React Testing Library, Vue Test Utils, Angular Testing"
    },
    "coverage_reporting": {
      "enabled": true,
      "description": "Coverage analysis and reporting with Istanbul/c8"
    },
    "test_sharding": {
      "enabled": true,
      "description": "Parallel test execution and sharding for performance"
    },
    "snapshot_testing": {
      "enabled": true,
      "description": "Snapshot testing for UI components"
    }
  },
  "dependencies": [],
  "peerPlugins": [
    "@claudeautopm/plugin-core"
  ],
  "mcpServers": {
    "recommended": [
      "context7"
    ],
    "optional": []
  },
  "keywords": [
    "claudeautopm",
    "plugin",
    "testing",
    "qa",
    "jest",
    "vitest",
    "testing-library",
    "react-testing-library",
    "vue-test-utils",
    "unit-testing",
    "integration-testing",
    "e2e-testing",
    "coverage",
    "tdd",
    "bdd"
  ],
  "compatibleWith": ">=3.0.0"
}
