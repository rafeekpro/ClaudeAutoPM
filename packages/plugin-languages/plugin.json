{
  "name": "@claudeautopm/plugin-languages",
  "version": "2.0.0",
  "schemaVersion": "2.0",
  "displayName": "Programming Languages",
  "description": "Complete programming languages plugin with Python, JavaScript, Node.js, Bash experts, language rules, and example scripts",
  "category": "languages",
  "metadata": {
    "category": "Programming Languages",
    "author": "ClaudeAutoPM Team",
    "license": "MIT",
    "homepage": "https://github.com/rafeekpro/ClaudeAutoPM",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/rafeekpro/ClaudeAutoPM.git",
      "directory": "packages/plugin-languages"
    },
    "size": "~18 KB (gzipped)",
    "required": false,
    "tags": ["languages", "python", "javascript", "nodejs", "bash", "typescript", "backend", "frontend"]
  },
  "agents": [
    {
      "name": "python-backend-engineer",
      "file": "agents/python-backend-engineer.md",
      "category": "languages",
      "description": "Python backend development with FastAPI, async patterns, and modern tooling. Expert in type hints (AsyncIterator, ParamSpec, TypeIs), Pydantic validation, and uv package management.",
      "version": "2.0.0",
      "tags": ["python", "backend", "fastapi", "async", "type-hints", "uv"],
      "mcp": [],
      "context7": [
        "/python/cpython",
        "/websites/fastapi_tiangolo"
      ]
    },
    {
      "name": "python-backend-expert",
      "file": "agents/python-backend-expert.md",
      "category": "languages",
      "description": "Advanced Python backend architecture with microservices, Celery, and production deployment. Expert in scalable systems and performance optimization.",
      "version": "2.0.0",
      "tags": ["python", "backend", "microservices", "celery", "expert", "architecture"],
      "mcp": [],
      "context7": [
        "/python/cpython",
        "/websites/fastapi_tiangolo"
      ]
    },
    {
      "name": "nodejs-backend-engineer",
      "file": "agents/nodejs-backend-engineer.md",
      "category": "languages",
      "description": "Node.js backend development with Express, Fastify, NestJS. Expert in async iteration (for await...of), AbortSignal, and Symbol.asyncIterator patterns.",
      "version": "2.0.0",
      "tags": ["nodejs", "backend", "express", "async", "typescript", "api"],
      "mcp": [],
      "context7": [
        "/nodejs/node"
      ]
    },
    {
      "name": "javascript-frontend-engineer",
      "file": "agents/javascript-frontend-engineer.md",
      "category": "languages",
      "description": "Modern JavaScript/TypeScript frontend development. Expert in ES6 patterns (object shorthand, spread, destructuring), Airbnb style guide, and browser APIs.",
      "version": "2.0.0",
      "tags": ["javascript", "frontend", "es6", "typescript", "airbnb", "browser"],
      "mcp": [],
      "context7": [
        "/airbnb/javascript"
      ]
    },
    {
      "name": "bash-scripting-expert",
      "file": "agents/bash-scripting-expert.md",
      "category": "languages",
      "description": "Bash shell scripting and automation. Expert in production-ready error handling (set -euo pipefail), logging, cleanup handlers, and POSIX compliance.",
      "version": "2.0.0",
      "tags": ["bash", "scripting", "automation", "shell", "posix", "error-handling"],
      "mcp": [],
      "context7": [
        "/bobbyiliev/introduction-to-bash-scripting"
      ]
    }
  ],
  "commands": [
    {
      "name": "python-api-scaffold",
      "file": "commands/python-api-scaffold.md",
      "category": "python",
      "priority": "medium",
      "description": "Generate production-ready FastAPI application with Context7-verified best practices",
      "tags": ["python", "fastapi", "api", "scaffold", "async"],
      "mcpTools": ["context7"]
    },
    {
      "name": "nodejs-api-scaffold",
      "file": "commands/nodejs-api-scaffold.md",
      "category": "nodejs",
      "priority": "medium",
      "description": "Generate production-ready Node.js REST API with Context7-verified ES6 and async patterns",
      "tags": ["nodejs", "express", "api", "scaffold", "typescript"],
      "mcpTools": ["context7"]
    },
    {
      "name": "python-optimize",
      "file": "commands/python-optimize.md",
      "description": "Optimize Python performance with Pyinstrument profiling, async patterns, and memory optimization",
      "category": "optimization",
      "tags": ["python", "performance", "profiling", "async", "memory", "optimization"],
      "requiredAgents": ["python-backend-engineer"],
      "context7": [
        "/joerick/pyinstrument",
        "/python/cpython",
        "/websites/fastapi_tiangolo"
      ]
    },
    {
      "name": "nodejs-optimize",
      "file": "commands/nodejs-optimize.md",
      "description": "Optimize Node.js performance with clustering, worker threads, and event loop optimization",
      "category": "optimization",
      "tags": ["nodejs", "performance", "clustering", "worker-threads", "event-loop", "optimization"],
      "requiredAgents": ["nodejs-backend-engineer"],
      "context7": [
        "/nodejs/node",
        "/websites/nodejs_api"
      ]
    },
    {
      "name": "javascript-optimize",
      "file": "commands/javascript-optimize.md",
      "description": "Optimize JavaScript/TypeScript frontend with bundling, tree-shaking, and runtime optimization",
      "category": "optimization",
      "tags": ["javascript", "frontend", "bundling", "tree-shaking", "performance", "optimization"],
      "requiredAgents": ["javascript-frontend-engineer"],
      "context7": [
        "/websites/web_dev_learn",
        "/airbnb/javascript"
      ]
    }
  ],
  "rules": [
    {
      "name": "code-quality-standards",
      "file": "rules/code-quality-standards.md",
      "priority": "high",
      "description": "Language-specific code quality standards with Context7-verified best practices for Python, JavaScript, Node.js, and Bash",
      "tags": ["quality", "linting", "formatting", "python", "javascript", "nodejs", "bash", "standards"],
      "appliesTo": ["commands", "agents"],
      "enforcesOn": ["python-backend-engineer", "python-backend-expert", "nodejs-backend-engineer", "javascript-frontend-engineer", "bash-scripting-expert"]
    },
    {
      "name": "testing-standards",
      "file": "rules/testing-standards.md",
      "priority": "high",
      "description": "TDD methodology and comprehensive testing standards for all programming languages",
      "tags": ["testing", "tdd", "quality", "coverage", "pytest", "jest", "bats"],
      "appliesTo": ["commands", "agents"],
      "enforcesOn": ["python-backend-engineer", "python-backend-expert", "nodejs-backend-engineer", "javascript-frontend-engineer", "bash-scripting-expert"]
    }
  ],
  "scripts": [
    {
      "name": "python-async-patterns",
      "file": "scripts/examples/python-async-patterns.py",
      "description": "Demonstrates Python async patterns: AsyncIterator, ParamSpec, TypeIs, TYPE_CHECKING",
      "type": "example",
      "executable": true,
      "category": "python",
      "tags": ["python", "async", "type-hints", "patterns", "context7"]
    },
    {
      "name": "javascript-es6-patterns",
      "file": "scripts/examples/javascript-es6-patterns.js",
      "description": "Demonstrates ES6 patterns from Airbnb guide: object shorthand, spread, destructuring, arrow functions",
      "type": "example",
      "executable": true,
      "category": "javascript",
      "tags": ["javascript", "es6", "airbnb", "patterns", "context7"]
    },
    {
      "name": "nodejs-async-iteration",
      "file": "scripts/examples/nodejs-async-iteration.js",
      "description": "Demonstrates Node.js async patterns: for await...of, AbortSignal, Symbol.asyncIterator",
      "type": "example",
      "executable": true,
      "category": "nodejs",
      "tags": ["nodejs", "async", "iteration", "patterns", "context7"]
    },
    {
      "name": "bash-production-script",
      "file": "scripts/examples/bash-production-script.sh",
      "description": "Production-ready Bash script with error handling, logging, cleanup, and retry logic",
      "type": "example",
      "executable": true,
      "category": "bash",
      "tags": ["bash", "production", "error-handling", "patterns", "context7"]
    },
    {
      "name": "typescript-patterns",
      "file": "scripts/examples/typescript-patterns.ts",
      "description": "TypeScript patterns for Node.js: generics, utility types, async iterators, type-safe event emitters",
      "type": "example",
      "executable": true,
      "category": "typescript",
      "tags": ["typescript", "nodejs", "generics", "patterns", "context7"]
    }
  ],
  "features": {
    "python_backend": {
      "enabled": true,
      "description": "Python backend development with FastAPI and modern async patterns"
    },
    "nodejs_backend": {
      "enabled": true,
      "description": "Node.js backend with Express, Fastify, and async iteration"
    },
    "javascript_frontend": {
      "enabled": true,
      "description": "Modern JavaScript/TypeScript frontend with ES6 best practices"
    },
    "bash_scripting": {
      "enabled": true,
      "description": "Production-ready Bash scripting and automation"
    },
    "typescript_support": {
      "enabled": true,
      "description": "TypeScript support with type-safe patterns"
    },
    "code_quality": {
      "enabled": true,
      "description": "Language-specific linting, formatting, and quality standards"
    },
    "testing_standards": {
      "enabled": true,
      "description": "TDD methodology and comprehensive testing requirements"
    }
  },
  "dependencies": [],
  "peerPlugins": [
    "@claudeautopm/plugin-core"
  ],
  "mcpServers": {
    "recommended": [
      "context7"
    ],
    "optional": []
  },
  "keywords": [
    "claudeautopm",
    "plugin",
    "languages",
    "python",
    "javascript",
    "nodejs",
    "bash",
    "typescript",
    "fastapi",
    "express",
    "backend",
    "frontend"
  ],
  "compatibleWith": ">=3.0.0"
}
